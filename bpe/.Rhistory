bpe <- read.csv("C:/Users/james/Downloads/bpe21_ensemble_xy_csv",sep = ";")
bpe <- read.csv("C:/Users/james/Downloads/bpe21_ensemble_xy_csv.csv",sep = ";")
bpe <- read.csv("C:/Users/james/Downloads/bpe21_ensemble_xy.csv",sep = ";")
bpe <- read.csv("C:/Users/james/Downloads/bpe21_ensemble_xy_csv/bpe21_ensemble_xy_csv.csv",sep = ";")
bpe <- read.csv("C:/Users/james/Downloads/bpe21_ensemble_xy_csv/bpe21_ensemble_xy.csv",sep = ";")
library(tidyr)
library(dplyr)
library(magrittr
library(magrittr)
library(magrittr)
bpe1 <- bpe[,c(4,5,7,8,9,10,21)]
INF <- bpe1 %>%
filter(TYPEQU == "D232")
PEDPOD <- bpe1 %>%
filter(TYPEQU == "D237")
MK <- bpe1 %>%
filter(TYPEQU == "D233")
PSY <- bpe1 %>%
filter(TYPEQU == "D243")
MED <- bpe1 %>%
filter(TYPEQU == "D201")
write.xlsx(INF,"/inf/inf.xlsx")
openxlsx::write.xlsx(INF,"/inf/inf.xlsx")
openxlsx::write.xlsx(INF,"inf/inf.xlsx")
openxlsx::write.xlsx(PEDPOD,"pedpod/pedpod.xlsx")
openxlsx::write.xlsx(MK,"mk/mk.xlsx")
openxlsx::write.xlsx(PSY,"psy/psy.xlsx")
openxlsx::write.xlsx(MED,"med/med.xlsx")
data = '{
"username": "james.michelot@ithea-conseil.fr",
"password": "CCjJ#$KRjKME&e8e"
}'
headers = c(
`Content-Type` = "application/json",
`Accept` = "application/json"
)
tok <- httr::POST(url = "https://registre-national-entreprises.inpi.fr/api/sso/login", httr::add_headers(.headers=headers),body = data)
tok
token<-httr::content(tok)
token<-as.character(token[[1]])
#RPE_COMPANY
headers = c(
`Content-Type` = "application/json",
`Accept` = "application/json",
`Authorization` = paste("Bearer",token)
)
contentz<- NULL
contentz <- httr::GET(url = 'https://registre-national-entreprises.inpi.fr/api/companies?codeCategory=01010101', httr::add_headers(.headers=headers))
View(contentz)
res<-httr::content(contentz)
contentz <- httr::GET(url = 'https://registre-national-entreprises.inpi.fr/api/companies?codeCategory=01010101&pageSize=1100', httr::add_headers(.headers=headers))
res<-httr::content(contentz)
contentz <- httr::GET(url = 'https://registre-national-entreprises.inpi.fr/api/companies?codeCategory=01010101&pageSize=1000', httr::add_headers(.headers=headers))
res<-httr::content(contentz)
contentz <- httr::GET(url = 'https://registre-national-entreprises.inpi.fr/api/companies?codeCategory=01010101&pageSize=1000&page=1', httr::add_headers(.headers=headers))
contentz <- httr::GET(url = 'https://registre-national-entreprises.inpi.fr/api/companies?codeCategory=01010101&pageSize=1000&page=2', httr::add_headers(.headers=headers))
res<-httr::content(contentz)
openxlsx::write.xlsx(res,("res.xlsx"))
# Chemin vers le fichier zip
zip_path <- "C:/Users/james/Downloads/stock RNE formalité.zip"
# Nom du fichier JSON dans le ZIP
file_name <- "stock_000001.json"
# Ouvrir une connexion au fichier dans le ZIP sans le décompresser physiquement
con <- unz(zip_path, file_name)
# Lire le contenu JSON à partir de la connexion
data_json <- fromJSON(con)
# Charger le package jsonlite
library(jsonlite)
# Lire le contenu JSON à partir de la connexion
data_json <- fromJSON(con)
View(data_json)
flat_json <- flatten(data_json)
View(flat_json)
View(flat_json)
flat_json2 <- flat_json %>%
filter(formality.content.exploitation.etablissementPrincipal.adresse.voie != "")
flat_json2 <- flat_json %>%
filter(formality.content.exploitation.etablissementPrincipal.adresse.voie || formality.content.exploitation.adresseEntreprise.adresse.voie != "")
flat_json2 <- flat_json %>%
filter(formality.content.exploitation.adresseEntreprise.adresse.voie != "")
flat_json3 <- flat_json %>%
filter(formality.content.exploitation.adresseEntreprise.adresse.voie != "")
flat_json3 <- flat_json %>%
filter(formality.content.exploitation.adresseEntreprise.adresse.voie != "NA")
flat_json3 <- flat_json %>%
filter(formality.content.exploitation.adresseEntreprise.adresse.voie != "m")
flat_json3 <- flat_json %>%
filter(formality.content.exploitation.adresseEntreprise.adresse.voie)
flat_json3 <- flat_json %>%
filter(is.character(formality.content.exploitation.adresseEntreprise.adresse.voie))
flat_json3 <- flat_json %>%
filter(length(formality.content.exploitation.adresseEntreprise.adresse.voie)>2)
flat_json3 <- flat_json %>%
filter(nchar(formality.content.exploitation.adresseEntreprise.adresse.voie)>2)
library(tidyr)
library(dplyr)
library(magrittr)
bpe <- read.csv("C:/Users/james/Downloads/bpe21_ensemble_xy_csv/bpe21_ensemble_xy.csv",sep = ";")
bpe1 <- bpe[,c(4,5,7,8,9,10,21)]
INF <- bpe1 %>%
filter(TYPEQU == "D232")
PEDPOD <- bpe1 %>%
filter(TYPEQU == "D237")
MK <- bpe1 %>%
filter(TYPEQU == "D233")
PSY <- bpe1 %>%
filter(TYPEQU == "D243")
MED <- bpe1 %>%
filter(TYPEQU == "D201")
library(sf)
# Définir le système de coordonnées source et cible
crs_lambert <- 2154  # Lambert-93
crs_wgs84 <- 4326    # WGS-84
# Créer une colonne SF point à partir des coordonnées Lambert
bpee_sf <- st_as_sf(bpe1, coords = c("LAMBERT_X", "LAMBERT_Y"), crs = crs_lambert)
bpe1 <- bpe1 %>%
filter(is.numeric(LAMBERT_X))
View(bpe1)
View(bpe1)
View(bpe1)
bpe1 <- bpe1 %>%
filter(LAMBERT_X != "")
library(tidyr)
library(dplyr)
library(magrittr)
library(sf)
# Définir le système de coordonnées source et cible
crs_lambert <- 2154  # Lambert-93
crs_wgs84 <- 4326    # WGS-84
# Créer une colonne SF point à partir des coordonnées Lambert
bpee_sf <- st_as_sf(bpe1, coords = c("LAMBERT_X", "LAMBERT_Y"), crs = crs_lambert)
# Transformer les coordonnées en WGS-84
bpee_sf_wgs84 <- st_transform(bpee_sf, crs_wgs84)
# Extraire les coordonnées transformées
bpee$Longitude <- st_coordinates(bpee_sf_wgs84)[,1]
# Extraire les coordonnées transformées
bpe1$Longitude <- st_coordinates(bpee_sf_wgs84)[,1]
bpe1$Latitude <- st_coordinates(bpee_sf_wgs84)[,2]
get_address <- function(longitude, latitude) {
response <- GET(paste0("https://api-adresse.data.gouv.fr/reverse/?lon=", longitude, "&lat=", latitude))
address_data <- content(response, "parsed")
return(address_data$features[[1]]$properties$label)
}
get_address <- function(longitude, latitude) {
response <- GET(paste0("https://api-adresse.data.gouv.fr/reverse/?lon=", longitude, "&lat=", latitude))
address_data <- content(response, "parsed")
return(address_data$features[[1]]$properties$label)
}
# Appliquer la fonction pour chaque ligne
bpe1$Adresse <- mapply(get_address, data$Longitude, data$Latitude)
# Appliquer la fonction pour chaque ligne
bpe1$Adresse <- mapply(get_address, bpe1$Longitude, bpe1$Latitude)
GET("https://api-adresse.data.gouv.fr/reverse/?lon=2.37&lat=48.357")
httr::GET("https://api-adresse.data.gouv.fr/reverse/?lon=2.37&lat=48.357")
get_address <- function(longitude, latitude) {
response <- httr::GET(paste0("https://api-adresse.data.gouv.fr/reverse/?lon=", longitude, "&lat=", latitude))
address_data <- content(response, "parsed")
return(address_data$features[[1]]$properties$label)
}
# Appliquer la fonction pour chaque ligne
bpe1$Adresse <- mapply(get_address, bpe1$Longitude, bpe1$Latitude)
get_address <- function(longitude, latitude) {
response <- httr::GET(paste0("https://api-adresse.data.gouv.fr/reverse/?lon=", longitude, "&lat=", latitude))
address_data <- content(response)
return(address_data$features[[1]]$properties$label)
}
# Appliquer la fonction pour chaque ligne
bpe1$Adresse <- mapply(get_address, bpe1$Longitude, bpe1$Latitude)
get_address <- function(longitude, latitude) {
response <- httr::GET(paste0("https://api-adresse.data.gouv.fr/reverse/?lon=", longitude, "&lat=", latitude))
address_data <- httr::content(response)
return(address_data$features[[1]]$properties$label)
}
# Appliquer la fonction pour chaque ligne
bpe1$Adresse <- mapply(get_address, bpe1$Longitude, bpe1$Latitude)
# Appliquer la fonction pour chaque ligne
bpe1$Adresse <- mapply(get_address, bpe1$Longitude, bpe1$Latitude)
bpe <- read.csv("C:/Users/james/Downloads/bpe21_ensemble_xy_csv/bpe21_ensemble_xy.csv",sep = ";")
bpe1 <- bpe[,c(4,5,7,8,9,10,21)]
bpe1 <- bpe1 %>%
filter(LAMBERT_X != "") %>%
filter(!grepl("^97",perl = TRUE))
bpe1 <- bpe1 %>%
filter(LAMBERT_X != "") %>%
filter(!grepl("^97",perl = TRUE,ignore.case = TRUE))
bpe1 <- bpe1 %>%
filter(LAMBERT_X != "") %>%
filter(nchar(DEP) < 3)
library(sf)
# Définir le système de coordonnées source et cible
crs_lambert <- 2154  # Lambert-93
crs_wgs84 <- 4326    # WGS-84
# Créer une colonne SF point à partir des coordonnées Lambert
bpee_sf <- st_as_sf(bpe1, coords = c("LAMBERT_X", "LAMBERT_Y"), crs = crs_lambert)
# Transformer les coordonnées en WGS-84
bpee_sf_wgs84 <- st_transform(bpee_sf, crs_wgs84)
# Extraire les coordonnées transformées
bpe1$Longitude <- st_coordinates(bpee_sf_wgs84)[,1]
bpe1$Latitude <- st_coordinates(bpee_sf_wgs84)[,2]
get_address <- function(longitude, latitude) {
response <- httr::GET(paste0("https://api-adresse.data.gouv.fr/reverse/?lon=", longitude, "&lat=", latitude))
address_data <- httr::content(response)
return(address_data$features[[1]]$properties$label)
}
# Appliquer la fonction pour chaque ligne
bpe1$Adresse <- mapply(get_address, bpe1$Longitude, bpe1$Latitude)
# Appliquer la fonction pour chaque ligne
bpe1$Adresse <- mapply(get_address, bpe1$Longitude, bpe1$Latitude)
get_address <- function(longitude, latitude) {
# Utilisation de tryCatch pour gérer les erreurs
result <- tryCatch({
response <- GET(paste0("https://api-adresse.data.gouv.fr/reverse/?lon=", longitude, "&lat=", latitude))
if (status_code(response) != 200) {
stop("Failed to fetch address")
}
address_data <- content(response, "parsed")
if (length(address_data$features) > 0) {
return(address_data$features[[1]]$properties$label)
} else {
return(NA)
}
}, error = function(e) {
message("Error in fetching address for: ", longitude, ", ", latitude, " - ", e$message)
return(NA)  # Retourne NA en cas d'erreur
})
return(result)
}
get_address <- function(longitude, latitude) {
# Utilisation de tryCatch pour gérer les erreurs
result <- tryCatch({
response <- GET(paste0("https://api-adresse.data.gouv.fr/reverse/?lon=", longitude, "&lat=", latitude))
if (status_code(response) != 200) {
stop("Failed to fetch address")
}
address_data <- content(response, "parsed")
if (length(address_data$features) > 0) {
return(address_data$features[[1]]$properties$label)
} else {
return(NA)
}
}, error = function(e) {
message("Error in fetching address for: ", longitude, ", ", latitude, " - ", e$message)
return(NA)  # Retourne NA en cas d'erreur
})
return(result)
}
# Appliquer la fonction pour chaque ligne
bpe1$Adresse <- mapply(get_address, bpe1$Longitude, bpe1$Latitude)
get_address <- function(longitude, latitude) {
# Utilisation de tryCatch pour gérer les erreurs
result <- tryCatch({
response <- httr::GET(paste0("https://api-adresse.data.gouv.fr/reverse/?lon=", longitude, "&lat=", latitude))
if (status_code(response) != 200) {
stop("Failed to fetch address")
}
address_data <- httr::content(response, "parsed")
if (length(address_data$features) > 0) {
return(address_data$features[[1]]$properties$label)
} else {
return(NA)
}
}, error = function(e) {
message("Error in fetching address for: ", longitude, ", ", latitude, " - ", e$message)
return(NA)  # Retourne NA en cas d'erreur
})
return(result)
}
# Appliquer la fonction pour chaque ligne
bpe1$Adresse <- mapply(get_address, bpe1$Longitude, bpe1$Latitude)
get_address <- function(longitude, latitude) {
# Utilisation de tryCatch pour gérer les erreurs
result <- tryCatch({
response <- httr::GET(paste0("https://api-adresse.data.gouv.fr/reverse/?lon=", longitude, "&lat=", latitude))
if (httr::status_code(response) != 200) {
stop("Failed to fetch address")
}
address_data <- httr::content(response, "parsed")
if (length(address_data$features) > 0) {
return(address_data$features[[1]]$properties$label)
} else {
return(NA)
}
}, error = function(e) {
message("Error in fetching address for: ", longitude, ", ", latitude, " - ", e$message)
return(NA)  # Retourne NA en cas d'erreur
})
return(result)
}
# Appliquer la fonction pour chaque ligne
bpe1$Adresse <- mapply(get_address, bpe1$Longitude, bpe1$Latitude)
library(tidyr)
library(dplyr)
library(magrittr)
bpe <- read.csv("C:/Users/james/Downloads/bpe21_ensemble_xy_csv/bpe21_ensemble_xy.csv",sep = ";")
bpe1 <- bpe[,c(4,5,7,8,9,10,21)]
bpe1 <- bpe1 %>%
filter(LAMBERT_X != "") %>%
filter(nchar(DEP) < 3)
bpe1 <- bpe1 %>%
filter(TYPEQU %IN% c("D232","D233", "D237","D243","D201"))
library(tidyverse)
bpe1 <- bpe1 %>%
filter(TYPEQU %IN% c("D232","D233", "D237","D243","D201"))
bpe1 <- bpe1 %>%
filter(TYPEQU %in% c("D232","D233", "D237","D243","D201"))
library(sf)
# Définir le système de coordonnées source et cible
crs_lambert <- 2154  # Lambert-93
crs_wgs84 <- 4326    # WGS-84
# Créer une colonne SF point à partir des coordonnées Lambert
bpee_sf <- st_as_sf(bpe1, coords = c("LAMBERT_X", "LAMBERT_Y"), crs = crs_lambert)
# Transformer les coordonnées en WGS-84
bpee_sf_wgs84 <- st_transform(bpee_sf, crs_wgs84)
# Extraire les coordonnées transformées
bpe1$Longitude <- st_coordinates(bpee_sf_wgs84)[,1]
bpe1$Latitude <- st_coordinates(bpee_sf_wgs84)[,2]
get_address <- function(longitude, latitude) {
# Utilisation de tryCatch pour gérer les erreurs
result <- tryCatch({
response <- httr::GET(paste0("https://api-adresse.data.gouv.fr/reverse/?lon=", longitude, "&lat=", latitude))
if (httr::status_code(response) != 200) {
stop("Failed to fetch address")
}
address_data <- httr::content(response, "parsed")
if (length(address_data$features) > 0) {
return(address_data$features[[1]]$properties$label)
} else {
return(NA)
}
}, error = function(e) {
message("Error in fetching address for: ", longitude, ", ", latitude, " - ", e$message)
return(NA)  # Retourne NA en cas d'erreur
})
return(result)
}
# Appliquer la fonction pour chaque ligne
bpe1$Adresse <- mapply(get_address, bpe1$Longitude, bpe1$Latitude)
View(bpe)
View(bpe1)
length(bpe1$Longitude)
length(bpe1$Longitude != "")
length(bpe1$Longitude < 0)
bpettt<- bpe1 %>% filter (Longitude != "")
INF <- bpe1 %>%
filter(TYPEQU == "D232")
PEDPOD <- bpe1 %>%
filter(TYPEQU == "D237")
MK <- bpe1 %>%
filter(TYPEQU == "D233")
PSY <- bpe1 %>%
filter(TYPEQU == "D243")
MED <- bpe1 %>%
filter(TYPEQU == "D201")
openxlsx::write.xlsx(MED,"inf/inf.xlsx")
openxlsx::write.xlsx(MED,"inf/inf.xlsx")
openxlsx::write.xlsx(MED,"pedpod/pedpod.xlsx")
openxlsx::write.xlsx(MED,"mk/mk.xlsx")
openxlsx::write.xlsx(MED,"psy/psy.xlsx")
openxlsx::write.xlsx(MED,"med/med.xlsx")
# Appliquer la fonction pour chaque ligne
bpe1$Adresse <- mapply(get_address, bpe1$Longitude, bpe1$Latitude)
INF$Adresse <- mapply(get_address, INF$Longitude, INF$Latitude)
get_address <- function(longitude, latitude, row_number) {
# Utilisation de tryCatch pour gérer les erreurs
result <- tryCatch({
response <- httr::GET(paste0("https://api-adresse.data.gouv.fr/reverse/?lon=", longitude, "&lat=", latitude))
if (httr::status_code(response) != 200) {
stop("Failed to fetch address")
}
address_data <- httr::content(response, "parsed")
if (length(address_data$features) > 0) {
print(paste("Processing row number:", row_number))
return(address_data$features[[1]]$properties$label)
} else {
return(NA)
}
}, error = function(e) {
message("Error in fetching address for: ", longitude, ", ", latitude, " at row ", row_number, " - ", e$message)
return(NA)  # Retourne NA en cas d'erreur
})
return(result)
}
INF$Adresse <- mapply(get_address, INF$Longitude, INF$Latitude, seq_along(INF$Longitude))
get_address <- function(longitude, latitude, row_number) {
# Utilisation de tryCatch pour gérer les erreurs
result <- tryCatch({
response <- httr::GET(paste0("https://api-adresse.data.gouv.fr/reverse/?lon=", longitude, "&lat=", latitude))
if (httr::status_code(response) != 200) {
stop("Failed to fetch address")
}
address_data <- httr::content(response, "parsed")
if (length(address_data$features) > 0) {
print(paste("Processing row number:", row_number))
return(address_data$features[[1]]$properties$label)
} else {
return(NA)
}
}, error = function(e) {
message("Error in fetching address for: ", longitude, ", ", latitude, " at row ", row_number, " - ", e$message)
return(NA)  # Retourne NA en cas d'erreur
})
return(result)
}
INF$Adresse <- mapply(get_address, INF$Longitude, INF$Latitude, seq_along(INF$Longitude))
